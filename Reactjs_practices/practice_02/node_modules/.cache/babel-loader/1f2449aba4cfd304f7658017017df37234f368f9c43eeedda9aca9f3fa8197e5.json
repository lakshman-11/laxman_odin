{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\nvar _cleanupSemantic = require('./cleanupSemantic');\nvar _printDiffs = require('./printDiffs');\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Encapsulate change lines until either a common newline or the end.\nclass ChangeBuffer {\n  // incomplete line\n  // complete lines\n  constructor(op) {\n    _defineProperty(this, 'op', void 0);\n    _defineProperty(this, 'line', void 0);\n    _defineProperty(this, 'lines', void 0);\n    this.op = op;\n    this.line = [];\n    this.lines = [];\n  }\n  pushSubstring(substring) {\n    this.pushDiff(new _cleanupSemantic.Diff(this.op, substring));\n  }\n  pushLine() {\n    // Assume call only if line has at least one diff,\n    // therefore an empty line must have a diff which has an empty string.\n    this.lines.push(new _cleanupSemantic.Diff(this.op, (0, _printDiffs.getHighlightedString)(this.op, this.line)));\n    this.line.length = 0;\n  }\n  isLineEmpty() {\n    return this.line.length === 0;\n  } // Minor input to buffer.\n\n  pushDiff(diff) {\n    this.line.push(diff);\n  } // Main input to buffer.\n\n  align(diff) {\n    const string = diff[1];\n    if (_printDiffs.MULTILINE_REGEXP.test(string)) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i < iLast) {\n          // The first substring completes the current change line.\n          // A middle substring is a change line.\n          this.pushSubstring(substring);\n          this.pushLine();\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushSubstring(substring);\n        }\n      });\n    } else {\n      // Append non-multiline string to current change line.\n      this.pushDiff(diff);\n    }\n  } // Output from buffer.\n\n  moveLinesTo(lines) {\n    if (!this.isLineEmpty()) {\n      this.pushLine();\n    }\n    lines.push(...this.lines);\n    this.lines.length = 0;\n  }\n} // Encapsulate common and change lines.\n\nclass CommonBuffer {\n  constructor(deleteBuffer, insertBuffer) {\n    _defineProperty(this, 'deleteBuffer', void 0);\n    _defineProperty(this, 'insertBuffer', void 0);\n    _defineProperty(this, 'lines', void 0);\n    this.deleteBuffer = deleteBuffer;\n    this.insertBuffer = insertBuffer;\n    this.lines = [];\n  }\n  pushDiffCommonLine(diff) {\n    this.lines.push(diff);\n  }\n  pushDiffChangeLines(diff) {\n    const isDiffEmpty = diff[1].length === 0; // An empty diff string is redundant, unless a change line is empty.\n\n    if (!isDiffEmpty || this.deleteBuffer.isLineEmpty()) {\n      this.deleteBuffer.pushDiff(diff);\n    }\n    if (!isDiffEmpty || this.insertBuffer.isLineEmpty()) {\n      this.insertBuffer.pushDiff(diff);\n    }\n  }\n  flushChangeLines() {\n    this.deleteBuffer.moveLinesTo(this.lines);\n    this.insertBuffer.moveLinesTo(this.lines);\n  } // Input to buffer.\n\n  align(diff) {\n    const op = diff[0];\n    const string = diff[1];\n    if (_printDiffs.MULTILINE_REGEXP.test(string)) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i === 0) {\n          const subdiff = new _cleanupSemantic.Diff(op, substring);\n          if (this.deleteBuffer.isLineEmpty() && this.insertBuffer.isLineEmpty()) {\n            // If both current change lines are empty,\n            // then the first substring is a common line.\n            this.flushChangeLines();\n            this.pushDiffCommonLine(subdiff);\n          } else {\n            // If either current change line is non-empty,\n            // then the first substring completes the change lines.\n            this.pushDiffChangeLines(subdiff);\n            this.flushChangeLines();\n          }\n        } else if (i < iLast) {\n          // A middle substring is a common line.\n          this.pushDiffCommonLine(new _cleanupSemantic.Diff(op, substring));\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushDiffChangeLines(new _cleanupSemantic.Diff(op, substring));\n        }\n      });\n    } else {\n      // Append non-multiline string to current change lines.\n      // Important: It cannot be at the end following empty change lines,\n      // because newline appended to the end of expected and received strings.\n      this.pushDiffChangeLines(diff);\n    }\n  } // Output from buffer.\n\n  getLines() {\n    this.flushChangeLines();\n    return this.lines;\n  }\n} // Given diffs from expected and received strings,\n// return new array of diffs split or joined into lines.\n//\n// To correctly align a change line at the end, the algorithm:\n// * assumes that a newline was appended to the strings\n// * omits the last newline from the output array\n//\n// Assume the function is not called:\n// * if either expected or received is empty string\n// * if neither expected nor received is multiline string\n\nconst getAlignedDiffs = diffs => {\n  const deleteBuffer = new ChangeBuffer(_cleanupSemantic.DIFF_DELETE);\n  const insertBuffer = new ChangeBuffer(_cleanupSemantic.DIFF_INSERT);\n  const commonBuffer = new CommonBuffer(deleteBuffer, insertBuffer);\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        deleteBuffer.align(diff);\n        break;\n      case _cleanupSemantic.DIFF_INSERT:\n        insertBuffer.align(diff);\n        break;\n      default:\n        commonBuffer.align(diff);\n    }\n  });\n  return commonBuffer.getLines();\n};\nvar _default = getAlignedDiffs;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_cleanupSemantic","require","_printDiffs","_defineProperty","obj","key","enumerable","configurable","writable","ChangeBuffer","constructor","op","line","lines","pushSubstring","substring","pushDiff","Diff","pushLine","push","getHighlightedString","length","isLineEmpty","diff","align","string","MULTILINE_REGEXP","test","substrings","split","iLast","forEach","i","moveLinesTo","CommonBuffer","deleteBuffer","insertBuffer","pushDiffCommonLine","pushDiffChangeLines","isDiffEmpty","flushChangeLines","subdiff","getLines","getAlignedDiffs","diffs","DIFF_DELETE","DIFF_INSERT","commonBuffer","_default"],"sources":["/home/laxus/Uchiha/[GigaCourse.Com] Udemy - React - The Complete Guide (incl Hooks, React Router, Redux)/08 - Time to Practice_ A Complete Practice Project/01-starting-project/node_modules/jest-diff/build/getAlignedDiffs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nvar _printDiffs = require('./printDiffs');\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Encapsulate change lines until either a common newline or the end.\nclass ChangeBuffer {\n  // incomplete line\n  // complete lines\n  constructor(op) {\n    _defineProperty(this, 'op', void 0);\n\n    _defineProperty(this, 'line', void 0);\n\n    _defineProperty(this, 'lines', void 0);\n\n    this.op = op;\n    this.line = [];\n    this.lines = [];\n  }\n\n  pushSubstring(substring) {\n    this.pushDiff(new _cleanupSemantic.Diff(this.op, substring));\n  }\n\n  pushLine() {\n    // Assume call only if line has at least one diff,\n    // therefore an empty line must have a diff which has an empty string.\n    this.lines.push(\n      new _cleanupSemantic.Diff(\n        this.op,\n        (0, _printDiffs.getHighlightedString)(this.op, this.line)\n      )\n    );\n    this.line.length = 0;\n  }\n\n  isLineEmpty() {\n    return this.line.length === 0;\n  } // Minor input to buffer.\n\n  pushDiff(diff) {\n    this.line.push(diff);\n  } // Main input to buffer.\n\n  align(diff) {\n    const string = diff[1];\n\n    if (_printDiffs.MULTILINE_REGEXP.test(string)) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i < iLast) {\n          // The first substring completes the current change line.\n          // A middle substring is a change line.\n          this.pushSubstring(substring);\n          this.pushLine();\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushSubstring(substring);\n        }\n      });\n    } else {\n      // Append non-multiline string to current change line.\n      this.pushDiff(diff);\n    }\n  } // Output from buffer.\n\n  moveLinesTo(lines) {\n    if (!this.isLineEmpty()) {\n      this.pushLine();\n    }\n\n    lines.push(...this.lines);\n    this.lines.length = 0;\n  }\n} // Encapsulate common and change lines.\n\nclass CommonBuffer {\n  constructor(deleteBuffer, insertBuffer) {\n    _defineProperty(this, 'deleteBuffer', void 0);\n\n    _defineProperty(this, 'insertBuffer', void 0);\n\n    _defineProperty(this, 'lines', void 0);\n\n    this.deleteBuffer = deleteBuffer;\n    this.insertBuffer = insertBuffer;\n    this.lines = [];\n  }\n\n  pushDiffCommonLine(diff) {\n    this.lines.push(diff);\n  }\n\n  pushDiffChangeLines(diff) {\n    const isDiffEmpty = diff[1].length === 0; // An empty diff string is redundant, unless a change line is empty.\n\n    if (!isDiffEmpty || this.deleteBuffer.isLineEmpty()) {\n      this.deleteBuffer.pushDiff(diff);\n    }\n\n    if (!isDiffEmpty || this.insertBuffer.isLineEmpty()) {\n      this.insertBuffer.pushDiff(diff);\n    }\n  }\n\n  flushChangeLines() {\n    this.deleteBuffer.moveLinesTo(this.lines);\n    this.insertBuffer.moveLinesTo(this.lines);\n  } // Input to buffer.\n\n  align(diff) {\n    const op = diff[0];\n    const string = diff[1];\n\n    if (_printDiffs.MULTILINE_REGEXP.test(string)) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i === 0) {\n          const subdiff = new _cleanupSemantic.Diff(op, substring);\n\n          if (\n            this.deleteBuffer.isLineEmpty() &&\n            this.insertBuffer.isLineEmpty()\n          ) {\n            // If both current change lines are empty,\n            // then the first substring is a common line.\n            this.flushChangeLines();\n            this.pushDiffCommonLine(subdiff);\n          } else {\n            // If either current change line is non-empty,\n            // then the first substring completes the change lines.\n            this.pushDiffChangeLines(subdiff);\n            this.flushChangeLines();\n          }\n        } else if (i < iLast) {\n          // A middle substring is a common line.\n          this.pushDiffCommonLine(new _cleanupSemantic.Diff(op, substring));\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushDiffChangeLines(new _cleanupSemantic.Diff(op, substring));\n        }\n      });\n    } else {\n      // Append non-multiline string to current change lines.\n      // Important: It cannot be at the end following empty change lines,\n      // because newline appended to the end of expected and received strings.\n      this.pushDiffChangeLines(diff);\n    }\n  } // Output from buffer.\n\n  getLines() {\n    this.flushChangeLines();\n    return this.lines;\n  }\n} // Given diffs from expected and received strings,\n// return new array of diffs split or joined into lines.\n//\n// To correctly align a change line at the end, the algorithm:\n// * assumes that a newline was appended to the strings\n// * omits the last newline from the output array\n//\n// Assume the function is not called:\n// * if either expected or received is empty string\n// * if neither expected nor received is multiline string\n\nconst getAlignedDiffs = diffs => {\n  const deleteBuffer = new ChangeBuffer(_cleanupSemantic.DIFF_DELETE);\n  const insertBuffer = new ChangeBuffer(_cleanupSemantic.DIFF_INSERT);\n  const commonBuffer = new CommonBuffer(deleteBuffer, insertBuffer);\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        deleteBuffer.align(diff);\n        break;\n\n      case _cleanupSemantic.DIFF_INSERT:\n        insertBuffer.align(diff);\n        break;\n\n      default:\n        commonBuffer.align(diff);\n    }\n  });\n  return commonBuffer.getLines();\n};\n\nvar _default = getAlignedDiffs;\nexports.default = _default;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}