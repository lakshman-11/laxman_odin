{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.joinAlignedDiffsExpand = exports.joinAlignedDiffsNoExpand = void 0;\nvar _cleanupSemantic = require('./cleanupSemantic');\nvar _printDiffs = require('./printDiffs');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst DIFF_CONTEXT_DEFAULT = 5; // same as diffLines\n// jest --no-expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting (and patch marks, if needed).\n\nconst joinAlignedDiffsNoExpand = function (diffs) {\n  let nContextLines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIFF_CONTEXT_DEFAULT;\n  const iLength = diffs.length;\n  const nContextLines2 = nContextLines + nContextLines; // First pass: count output lines and see if it has patches.\n\n  let jLength = iLength;\n  let hasExcessAtStartOrEnd = false;\n  let nExcessesBetweenChanges = 0;\n  let i = 0;\n  while (i !== iLength) {\n    const iStart = i;\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at start\n        if (i > nContextLines) {\n          jLength -= i - nContextLines; // subtract excess common lines\n\n          hasExcessAtStartOrEnd = true;\n        }\n      } else if (i === iLength) {\n        // at end\n        const n = i - iStart;\n        if (n > nContextLines) {\n          jLength -= n - nContextLines; // subtract excess common lines\n\n          hasExcessAtStartOrEnd = true;\n        }\n      } else {\n        // between changes\n        const n = i - iStart;\n        if (n > nContextLines2) {\n          jLength -= n - nContextLines2; // subtract excess common lines\n\n          nExcessesBetweenChanges += 1;\n        }\n      }\n    }\n    while (i !== iLength && diffs[i][0] !== _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n  }\n  const hasPatch = nExcessesBetweenChanges !== 0 || hasExcessAtStartOrEnd;\n  if (nExcessesBetweenChanges !== 0) {\n    jLength += nExcessesBetweenChanges + 1; // add patch lines\n  } else if (hasExcessAtStartOrEnd) {\n    jLength += 1; // add patch line\n  }\n\n  const jLast = jLength - 1;\n  const lines = [];\n  let jPatchMark = 0; // index of placeholder line for current patch mark\n\n  if (hasPatch) {\n    lines.push(''); // placeholder line for first patch mark\n  } // Indexes of expected or received lines in current patch:\n\n  let aStart = 0;\n  let bStart = 0;\n  let aEnd = 0;\n  let bEnd = 0;\n  const pushCommonLine = line => {\n    const j = lines.length;\n    lines.push((0, _printDiffs.printCommonLine)(line, j === 0 || j === jLast));\n    aEnd += 1;\n    bEnd += 1;\n  };\n  const pushDeleteLine = line => {\n    lines.push((0, _printDiffs.printDeleteLine)(line));\n    aEnd += 1;\n  };\n  const pushInsertLine = line => {\n    lines.push((0, _printDiffs.printInsertLine)(line));\n    bEnd += 1;\n  }; // Second pass: push lines with diff formatting (and patch marks, if needed).\n\n  i = 0;\n  while (i !== iLength) {\n    let iStart = i;\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at beginning\n        if (i > nContextLines) {\n          iStart = i - nContextLines;\n          aStart = iStart;\n          bStart = iStart;\n          aEnd = aStart;\n          bEnd = bStart;\n        }\n        for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else if (i === iLength) {\n        // at end\n        const iEnd = i - iStart > nContextLines ? iStart + nContextLines : i;\n        for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else {\n        // between changes\n        const nCommon = i - iStart;\n        if (nCommon > nContextLines2) {\n          const iEnd = iStart + nContextLines;\n          for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n          lines[jPatchMark] = (0, _printDiffs.createPatchMark)(aStart, aEnd, bStart, bEnd);\n          jPatchMark = lines.length;\n          lines.push(''); // placeholder line for next patch mark\n\n          const nOmit = nCommon - nContextLines2;\n          aStart = aEnd + nOmit;\n          bStart = bEnd + nOmit;\n          aEnd = aStart;\n          bEnd = bStart;\n          for (let iCommon = i - nContextLines; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        } else {\n          for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        }\n      }\n    }\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_DELETE) {\n      pushDeleteLine(diffs[i][1]);\n      i += 1;\n    }\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_INSERT) {\n      pushInsertLine(diffs[i][1]);\n      i += 1;\n    }\n  }\n  if (hasPatch) {\n    lines[jPatchMark] = (0, _printDiffs.createPatchMark)(aStart, aEnd, bStart, bEnd);\n  }\n  return lines.join('\\n');\n}; // jest --expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting.\n\nexports.joinAlignedDiffsNoExpand = joinAlignedDiffsNoExpand;\nconst joinAlignedDiffsExpand = diffs => diffs.map((diff, i, diffs) => {\n  const line = diff[1];\n  switch (diff[0]) {\n    case _cleanupSemantic.DIFF_DELETE:\n      return (0, _printDiffs.printDeleteLine)(line);\n    case _cleanupSemantic.DIFF_INSERT:\n      return (0, _printDiffs.printInsertLine)(line);\n    default:\n      return (0, _printDiffs.printCommonLine)(line, i === 0 || i === diffs.length - 1);\n  }\n}).join('\\n');\nexports.joinAlignedDiffsExpand = joinAlignedDiffsExpand;","map":{"version":3,"names":["Object","defineProperty","exports","value","joinAlignedDiffsExpand","joinAlignedDiffsNoExpand","_cleanupSemantic","require","_printDiffs","DIFF_CONTEXT_DEFAULT","diffs","nContextLines","iLength","length","nContextLines2","jLength","hasExcessAtStartOrEnd","nExcessesBetweenChanges","i","iStart","DIFF_EQUAL","n","hasPatch","jLast","lines","jPatchMark","push","aStart","bStart","aEnd","bEnd","pushCommonLine","line","j","printCommonLine","pushDeleteLine","printDeleteLine","pushInsertLine","printInsertLine","iCommon","iEnd","nCommon","createPatchMark","nOmit","DIFF_DELETE","DIFF_INSERT","join","map","diff"],"sources":["/home/laxus/Uchiha/[GigaCourse.Com] Udemy - React - The Complete Guide (incl Hooks, React Router, Redux)/08 - Time to Practice_ A Complete Practice Project/01-starting-project/node_modules/jest-diff/build/joinAlignedDiffs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.joinAlignedDiffsExpand = exports.joinAlignedDiffsNoExpand = void 0;\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nvar _printDiffs = require('./printDiffs');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst DIFF_CONTEXT_DEFAULT = 5; // same as diffLines\n// jest --no-expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting (and patch marks, if needed).\n\nconst joinAlignedDiffsNoExpand = (\n  diffs,\n  nContextLines = DIFF_CONTEXT_DEFAULT\n) => {\n  const iLength = diffs.length;\n  const nContextLines2 = nContextLines + nContextLines; // First pass: count output lines and see if it has patches.\n\n  let jLength = iLength;\n  let hasExcessAtStartOrEnd = false;\n  let nExcessesBetweenChanges = 0;\n  let i = 0;\n\n  while (i !== iLength) {\n    const iStart = i;\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at start\n        if (i > nContextLines) {\n          jLength -= i - nContextLines; // subtract excess common lines\n\n          hasExcessAtStartOrEnd = true;\n        }\n      } else if (i === iLength) {\n        // at end\n        const n = i - iStart;\n\n        if (n > nContextLines) {\n          jLength -= n - nContextLines; // subtract excess common lines\n\n          hasExcessAtStartOrEnd = true;\n        }\n      } else {\n        // between changes\n        const n = i - iStart;\n\n        if (n > nContextLines2) {\n          jLength -= n - nContextLines2; // subtract excess common lines\n\n          nExcessesBetweenChanges += 1;\n        }\n      }\n    }\n\n    while (i !== iLength && diffs[i][0] !== _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n  }\n\n  const hasPatch = nExcessesBetweenChanges !== 0 || hasExcessAtStartOrEnd;\n\n  if (nExcessesBetweenChanges !== 0) {\n    jLength += nExcessesBetweenChanges + 1; // add patch lines\n  } else if (hasExcessAtStartOrEnd) {\n    jLength += 1; // add patch line\n  }\n\n  const jLast = jLength - 1;\n  const lines = [];\n  let jPatchMark = 0; // index of placeholder line for current patch mark\n\n  if (hasPatch) {\n    lines.push(''); // placeholder line for first patch mark\n  } // Indexes of expected or received lines in current patch:\n\n  let aStart = 0;\n  let bStart = 0;\n  let aEnd = 0;\n  let bEnd = 0;\n\n  const pushCommonLine = line => {\n    const j = lines.length;\n    lines.push((0, _printDiffs.printCommonLine)(line, j === 0 || j === jLast));\n    aEnd += 1;\n    bEnd += 1;\n  };\n\n  const pushDeleteLine = line => {\n    lines.push((0, _printDiffs.printDeleteLine)(line));\n    aEnd += 1;\n  };\n\n  const pushInsertLine = line => {\n    lines.push((0, _printDiffs.printInsertLine)(line));\n    bEnd += 1;\n  }; // Second pass: push lines with diff formatting (and patch marks, if needed).\n\n  i = 0;\n\n  while (i !== iLength) {\n    let iStart = i;\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at beginning\n        if (i > nContextLines) {\n          iStart = i - nContextLines;\n          aStart = iStart;\n          bStart = iStart;\n          aEnd = aStart;\n          bEnd = bStart;\n        }\n\n        for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else if (i === iLength) {\n        // at end\n        const iEnd = i - iStart > nContextLines ? iStart + nContextLines : i;\n\n        for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else {\n        // between changes\n        const nCommon = i - iStart;\n\n        if (nCommon > nContextLines2) {\n          const iEnd = iStart + nContextLines;\n\n          for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n\n          lines[jPatchMark] = (0, _printDiffs.createPatchMark)(\n            aStart,\n            aEnd,\n            bStart,\n            bEnd\n          );\n          jPatchMark = lines.length;\n          lines.push(''); // placeholder line for next patch mark\n\n          const nOmit = nCommon - nContextLines2;\n          aStart = aEnd + nOmit;\n          bStart = bEnd + nOmit;\n          aEnd = aStart;\n          bEnd = bStart;\n\n          for (let iCommon = i - nContextLines; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        } else {\n          for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        }\n      }\n    }\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_DELETE) {\n      pushDeleteLine(diffs[i][1]);\n      i += 1;\n    }\n\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_INSERT) {\n      pushInsertLine(diffs[i][1]);\n      i += 1;\n    }\n  }\n\n  if (hasPatch) {\n    lines[jPatchMark] = (0, _printDiffs.createPatchMark)(\n      aStart,\n      aEnd,\n      bStart,\n      bEnd\n    );\n  }\n\n  return lines.join('\\n');\n}; // jest --expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting.\n\nexports.joinAlignedDiffsNoExpand = joinAlignedDiffsNoExpand;\n\nconst joinAlignedDiffsExpand = diffs =>\n  diffs\n    .map((diff, i, diffs) => {\n      const line = diff[1];\n\n      switch (diff[0]) {\n        case _cleanupSemantic.DIFF_DELETE:\n          return (0, _printDiffs.printDeleteLine)(line);\n\n        case _cleanupSemantic.DIFF_INSERT:\n          return (0, _printDiffs.printInsertLine)(line);\n\n        default:\n          return (0, _printDiffs.printCommonLine)(\n            line,\n            i === 0 || i === diffs.length - 1\n          );\n      }\n    })\n    .join('\\n');\n\nexports.joinAlignedDiffsExpand = joinAlignedDiffsExpand;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}